{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Content","Layout","Footer","Paragraph","Typography","Title","Item","Timeline","App","className","span","offset","level","mode","label","color","dot","CheckCircleOutlined","style","fontSize","LoadingOutlined","spin","EnvironmentOutlined","italic","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAIQA,EAAoBC,IAApBD,QAASE,EAAWD,IAAXC,OACTC,EAAqBC,IAArBD,UAAWE,EAAUD,IAAVC,MACXC,EAASC,IAATD,KAuDOE,EArDC,kBACd,mCACE,eAAC,IAAD,WACE,eAACR,EAAD,WACE,cAAC,IAAD,CAAKS,UAAU,cAAf,SACE,eAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,EAAvB,UACE,eAACN,EAAD,WACE,uBADF,+BAGA,eAACA,EAAD,CAAOO,MAAO,EAAd,wDAEE,uBAAS,gCAAO,oDAChB,uBAHF,eAOJ,cAAC,IAAD,UACE,eAAC,IAAD,CAAKF,KAAM,GAAIC,OAAQ,EAAvB,UACE,eAACN,EAAD,CAAOO,MAAO,EAAGH,UAAU,cAA3B,yBAEE,uBAFF,UAIA,eAAC,IAAD,CAAUI,KAAM,QAAhB,UACE,cAACP,EAAD,CAAMQ,MAAM,UAAUC,MAAM,QAAQC,IAAK,cAACC,EAAA,EAAD,CAAqBC,MAAO,CAAEC,SAAU,UAAjF,8CAGA,cAACb,EAAD,CAAMQ,MAAM,SAASC,MAAM,QAAQC,IAAK,cAACC,EAAA,EAAD,CAAqBC,MAAO,CAAEC,SAAU,UAAhF,wBAGA,cAACb,EAAD,CAAMQ,MAAM,SAASE,IAAK,cAACI,EAAA,EAAD,CAAiBF,MAAO,CAAEC,SAAU,QAAUE,MAAI,IAA5E,yCAGA,cAACf,EAAD,CAAMQ,MAAM,UAAUC,MAAM,MAAMC,IAAK,cAACM,EAAA,EAAD,CAAqBJ,MAAO,CAAEC,SAAU,UAA/E,4BAGA,cAACb,EAAD,CAAMQ,MAAM,MAAMC,MAAM,YAAxB,wCAKR,cAACb,EAAD,UACE,cAAC,IAAD,CAAKO,UAAU,cAAf,SACE,cAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,EAAvB,SACE,cAACR,EAAD,CAAWoB,QAAQ,EAAnB,SACE,2ECtCCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7fabb181.chunk.js","sourcesContent":["import './App.less';\nimport React, { FC } from 'react';\nimport { Col, Layout, Row, Timeline, Typography } from 'antd';\nimport { CheckCircleOutlined, EnvironmentOutlined, LoadingOutlined } from '@ant-design/icons';\nconst { Content, Footer } = Layout;\nconst { Paragraph, Title } = Typography;\nconst { Item } = Timeline;\n\nconst App: FC = () => (\n  <>\n    <Layout>\n      <Content>\n        <Row className=\"text-center\">\n          <Col span={20} offset={2}>\n            <Title>\n              <br></br>Welcome to dontspell.net!\n            </Title>\n            <Title level={4}>\n              The online community for drawing/word games\n              <br></br><small><i>Coming soon&trade;</i></small>\n              <br></br>&nbsp;\n            </Title>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={20} offset={2}>\n            <Title level={3} className=\"text-center\">\n              The gameplan\n              <br></br>&nbsp;\n            </Title>\n            <Timeline mode={'right'}>\n              <Item label=\"3-12-21\" color=\"green\" dot={<CheckCircleOutlined style={{ fontSize: '24px' }} />}>\n                Seriously consider making a site\n              </Item>\n              <Item label=\"4-9-21\" color=\"green\" dot={<CheckCircleOutlined style={{ fontSize: '24px' }} />}>\n                Buy domain\n              </Item>\n              <Item label=\"5-8-21\" dot={<LoadingOutlined style={{ fontSize: '16px' }} spin />}>\n                Learn JavaScript frameworks\n              </Item>\n              <Item label=\"7-21-21\" color=\"red\" dot={<EnvironmentOutlined style={{ fontSize: '24px' }} />}>\n                Start building\n              </Item>\n              <Item label=\"TBD\" color=\"lightGray\">Launch the site</Item>\n            </Timeline>\n          </Col>\n        </Row>\n      </Content>\n      <Footer>\n        <Row className=\"text-center\">\n          <Col span={20} offset={2}>\n            <Paragraph italic={true}>\n              <small>&copy;2021 Stephen Barrack</small>\n            </Paragraph>\n          </Col>\n        </Row>\n      </Footer>\n    </Layout>\n  </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}